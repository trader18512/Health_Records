type Error = variant { InvalidPayload : text; NotFound : text };
type Patient = record {
  id : text;
  age : nat64;
  bloodType : text;
  name : text;
  createdAt : nat64;
  updatedAt : opt nat64;
  medicalHistory : text;
  gender : text;
};
type PatientPayload = record {
  age : nat64;
  bloodType : text;
  name : text;
  medicalHistory : text;
  gender : text;
};
type _AzleResult = variant { Ok : Patient; Err : Error };
type _AzleResult_1 = variant { Ok : vec Patient; Err : Error };
service : () -> {
  addPatient : (PatientPayload) -> (_AzleResult);
  deletePatient : (text) -> (_AzleResult);
  getPatient : (text) -> (_AzleResult) query;
  getPatients : () -> (_AzleResult_1) query;
  updatePatient : (text, PatientPayload) -> (_AzleResult);
}